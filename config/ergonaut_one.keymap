#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <150>;
    tapping-term-ms = <150>;
};

&mt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        game_layer_toggle {
            bindings = <&tog 5>;
            key-positions = <37 36 38>;
        };

        ctrl+backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <39 40>;
        };

        lang_zap {
            bindings = <&none>;
            key-positions = <41 40>;
        };

        layer_4 {
            bindings = <&mo 4>;
            key-positions = <37 36>;
        };

        game_layer2_toggle {
            bindings = <&tog 6>;
            key-positions = <40 39 41>;
        };

        left_gut {
            bindings = <&kp LEFT_GUI>;
            key-positions = <37 38>;
        };
    };

    macros {
        lang_zap: lang_zap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_ALT) &kp COMMA &kp LS(LEFT_ALT)>;
            label = "LANG_ZAP";
        };

        lang_dot: lang_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_ALT) &kp DOT &kp LS(LEFT_ALT)>;
            label = "LANG_DOT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp NON_US_BACKSLASH  &kp W           &kp E             &kp R        &kp T        &kp Y            &kp U        &kp I               &kp O            &trans                   &trans
&kp SLASH  &kp Q                 &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LCTRL F  &kp G        &kp H            &mt LCTRL J  &mt RIGHT_SHIFT K   &mt RIGHT_ALT L  &kp P                    &mt RIGHT_BRACKET LEFT_BRACKET
&kp Z      &mt LEFT_GUI A        &kp X           &kp C             &kp V        &kp B        &kp N            &kp M        &kp COMMA           &kp DOT          &mt RIGHT_GUI SEMICOLON  &kp SQT
                                                 &lt 4 DEL         &lt 2 TAB    &lt LWR RET  &lt 1 BACKSPACE  &lt 2 SPACE  &lt 4 LS(LEFT_ALT)
            >;
        };

        lower_layer {
            bindings = <
&mt LEFT_GUI F1    &kp F2    &kp F3  &kp F4    &kp F5    &kp F6     &kp F7     &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&mt LEFT_ALT PLUS  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &mt RCTRL MINUS
&mt LCTRL EQUAL    &kp N1    &kp N2  &kp N3    &kp N4    &kp N5     &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &kp DELETE
                                     &trans    &trans    &trans     &trans     &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&mt LEFT_GUI KP_NUM  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp C_VOL_UP  &kp INSERT  &kp PSCRN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp CLCK
&mt LEFT_ALT EQUAL   &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp C_MUTE    &kp LEFT    &kp UP     &kp DOWN_ARROW  &kp RIGHT_ARROW  &mt RCTRL K_APP
&kp LCTRL            &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp C_VOL_DN  &kp HOME    &kp END    &kp PG_UP       &kp PAGE_DOWN    &kp RALT
                                                 &trans     &trans     &trans        &trans        &trans      &trans
            >;
        };

        bluetooth_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };

        hotcut_layer {
            bindings = <
&kp LG(D)    &kp LS(LG(Z))  &kp LG(S)  &kp LS(LG(X))  &kp LG(R)  &kp GRAVE           &kp C_PREVIOUS  &trans  &kp LS(LG(PSCRN))  &trans     &trans                   &trans
&kp LA(TAB)  &kp LG(Z)      &kp LG(X)  &kp LG(C)      &kp LG(F)  &kp LC(LA(INSERT))  &kp C_PP        &trans  &kp LS(LG(S))      &kp LG(L)  &kp LG(LS(RIGHT_ARROW))  &trans
&trans       &kp LC(Z)      &kp LC(X)  &kp LC(C)      &kp LC(V)  &kp LC(LA(DELETE))  &kp C_NEXT      &trans  &lang_zap          &lang_dot  &trans                   &trans
                                       &trans         &trans     &trans              &trans          &trans  &trans
            >;
        };

        game_layer {
            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E    &kp R      &kp T        &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL       &kp A  &kp S  &kp D    &kp F      &kp G        &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C    &kp V      &kp B        &trans  &trans  &trans  &trans  &trans  &trans
                              &kp TAB  &kp SPACE  &lt 1 ENTER  &trans  &trans  &trans
            >;
        };

        game_layer2 {
            bindings = <
&kp ESCAPE      &kp Q           &kp UP_ARROW    &kp E            &kp R      &kp T  &trans     &trans  &trans  &trans  &trans  &trans
&kp LCTRL       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F      &kp G  &trans     &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp Z           &kp X           &kp C            &kp V      &kp B  &trans     &trans  &trans  &trans  &trans  &trans
                                                &kp TAB          &kp SPACE  &mo 1  &kp ENTER  &trans  &trans
            >;
        };
    };
};
