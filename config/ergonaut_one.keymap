#include "custom-behaviors.dtsi"
#include "custom-macros.dtsi"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define ENG 0
#define RUS 1
#define LWR 2
#define RSE 3
#define BLU 4
#define HOT 5
#define GAM 6
#define GA2 7

&lt {
    quick-tap-ms = <150>;
    tapping-term-ms = <150>;
};
&mt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

/ {
    behaviors {
                HOLD_COMBO_BEHAVIOR(htlwr_rus, <&m_lwr_rus>) // macro_lwr_rus on hold and kp on tap
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri-layer {
            if-layers = <LWR RSE>;
            then-layer = <BLU>;
        };
    };
    combos {
        compatible = "zmk,combos";
        game_layer_toggle {
            bindings = <&tog GAM>;
            key-positions = <37 36 38>;
        };
        combo_eng_rus {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <26 39>;
                        layers = <ENG>, <RUS>;
                        bindings = <&m_tom_rus>;
        };
        combo_rus_eng {
                        timeout-ms = <COMBO_TIMEOUT>;
                        // key-positions = <31 39>; // left half test positions
                        key-positions = <37 42>; // right half
                        layers = <ENG>, <RUS>;
                        bindings = <&m_tom_eng>;
        };
        combo_number_on_lower {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <0>; 
                        layers = <LWR>;
                        bindings = <&m_kp_number>;
        };
        ctrl+backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <39 40>;
        };
        game_layer2_toggle {
            bindings = <&tog GA2>;
            key-positions = <36 40>;
        };
        left_gut {
            bindings = <&kp LEFT_GUI>;
            key-positions = <37 38>;
        };
    };
    macros {
        SWITCH_LANG_AND_MO_LAYER_MACRO(lwr_rus, LWR, ENG_NUM, SECOND_NUM)
        SWITCH_LANG_AND_TO_LAYER_MACRO(tom_rus, RUS, SECOND_NUM)
        SWITCH_LANG_AND_TO_LAYER_MACRO(tom_eng, ENG, ENG_NUM)
        SWITCH_LANG_AND_KP_MACRO(kp_number, HASH, SECOND_NUM, ENG_NUM)
    };
    keymap {
        compatible = "zmk,keymap";

        eng_layer {
            bindings = <
&kp ESC    &kp BACKSLASH   &kp W           &kp E             &kp R        &kp T        &kp Y            &kp U        &kp I               &kp O            &trans                   &trans
&kp SLASH  &kp Q           &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LCTRL F  &kp G        &kp H            &mt LCTRL J  &mt RIGHT_SHIFT K   &mt RIGHT_ALT L  &kp P                    &mt RIGHT_BRACKET LEFT_BRACKET
&kp Z      &mt LEFT_GUI A  &kp X           &kp C             &kp V        &kp B        &kp N            &kp M        &kp COMMA           &kp DOT          &mt RIGHT_GUI SEMICOLON  &kp SQT
                                           &lt HOT DEL         &lt RSE TAB    &lt LWR RET  &lt LWR BACKSPACE  &lt RSE SPACE  &lt HOT LS(LEFT_ALT)
            >;
        };
        rus_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &trans  &b_htlwr_rus ENG BACKSPACE  &trans  &trans  &trans
            >;
        };
        lower_layer {
            bindings = <
&mt LEFT_GUI F1    &kp F2    &kp F3  &kp F4    &kp F5    &kp F6     &kp F7     &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&mt LEFT_ALT PLUS  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &mt RCTRL MINUS
&mt LCTRL EQUAL    &kp N1    &kp N2  &kp N3    &kp N4    &kp N5     &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &kp DELETE
                                     &trans    &trans    &trans     &trans     &trans    &trans
            >;
        };
        raise_layer {
            bindings = <
&mt LEFT_GUI KP_NUM  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp C_VOL_UP  &kp INSERT  &kp PSCRN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp CLCK
&mt LEFT_ALT EQUAL   &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp C_MUTE    &kp LEFT    &kp UP     &kp DOWN_ARROW  &kp RIGHT_ARROW  &mt RCTRL K_APP
&kp LCTRL            &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp C_VOL_DN  &kp HOME    &kp END    &kp PG_UP       &kp RIGHT        &kp PAGE_DOWN
                                                 &trans     &trans     &trans        &trans        &trans      &trans
            >;
        };
        bluetooth_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };
        hotcut_layer {
            bindings = <
&kp LG(D)    &kp LS(LG(Z))  &kp LG(S)  &kp LS(LG(X))  &kp LG(R)  &kp GRAVE           &kp C_PREVIOUS  &trans  &kp LS(LG(PSCRN))  &trans     &trans                   &trans
&kp LA(TAB)  &kp LC(Z)      &kp LG(X)  &kp LG(C)      &kp LG(F)  &kp LC(LA(INSERT))  &kp C_PP        &trans  &kp LS(LG(S))      &kp LG(L)  &kp LG(LS(RIGHT_ARROW))  &trans
&trans       &kp LG(Z)      &kp LC(X)  &kp LC(C)      &kp LC(V)  &kp LC(LA(DELETE))  &kp C_NEXT      &trans  &trans             &trans     &trans                   &trans
                                       &trans         &trans     &trans              &trans          &trans  &trans
            >;
        };
        game_layer {
            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E    &kp R      &kp T        &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL       &kp A  &kp S  &kp D    &kp F      &kp G        &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C    &kp V      &kp B        &trans  &trans  &trans  &trans  &trans  &trans
                              &kp TAB  &kp SPACE  &lt LWR ENTER  &trans  &trans  &trans
            >;
        };
        game_layer2 {
            bindings = <
&kp ESCAPE      &kp Q           &kp UP_ARROW    &kp E            &kp R      &kp T  &trans     &trans  &trans  &trans  &trans  &trans
&kp LCTRL       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F      &kp G  &trans     &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp Z           &kp X           &kp C            &kp V      &kp B  &trans     &trans  &trans  &trans  &trans  &trans
                                                &kp TAB          &kp SPACE  &mo 1  &kp ENTER  &trans  &trans
            >;
        };
    };
};
